from asdTools.Classes.API.ApiBase import ApiBase


class LLMsAPI(ApiBase):
    def __init__(self, 
                 url:str="http:localhost:8000", 
                 history:list=[],
                 max_length:int=2048,
                 temperature:float=0.95, 
                 top_p:float=0.7, 
                 headers:dict={'Content-Type': 'application/json'},
                 memory:int=-1,
                 user_name:str="User",
                 LLMs_name:str="LLMs", 
                 **kwargs) -> None:
        """Initializes LLMsAPI object.

        Args:
            url (str): LLMs chatbot API endpoint URL.
            history (list): Chat history to seed LLMsAPI object.
            max_length (int): Maximum length of response generated by LLMs API.
            temperature (float): Sampling temperature used by LLMs API.
            top_p (float): Top-p sampling cutoff used by LLMs API.
            headers (dict): Headers to be passed to LLMs API.
            memory (int): Length of chat history to be stored in memory. Set to
                -1 for infinite memory.
            user_name (str): Name of user to be used in chat logs.
            LLMs_name (str): Name of LLMs chatbot to be used in chat logs.
            **kwargs: Arbitrary keyword arguments.
        """
        super().__init__(**kwargs)
        self.url = url
        self.chat_data = {
            "prompt": "",
            "history": history,
            "max_length": max_length,
            "temperature": temperature,
            "top_p": top_p
        }
        self.chat_time = []
        self.headers = headers
        self.user_name = user_name
        self.LLMs_name = LLMs_name
        self.memory = memory

    def configure(self, 
                  url:str="", 
                  history:list=[],
                  max_length:int=2048,
                  temperature:float=0.95, 
                  top_p:float=0.7,
                  headers:dict={},
                  memory:int=-2,
                  user_name:str="",
                  LLMs_name:str="") -> None:
        """Configures LLMsAPI object with specified parameters.

        Args:
            url (str): LLMs chatbot API endpoint URL.
            history (list): Chat history to seed LLMsAPI object.
            max_length (int): Maximum length of response generated by LLMs API.
            temperature (float): Sampling temperature used by LLMs API.
            top_p (float): Top-p sampling cutoff used by LLMs API.
            headers (dict): Headers to be passed to LLMs API.
            memory (int): Length of chat history to be stored in memory. Set to
                -1 for infinite memory.
            user_name (str): Name of user to be used in chat logs.
            LLMs_name (str): Name of LLMs chatbot to be used in chat logs.
        """
        if url != "":
            self.url = url
        if memory != -2:
            self.memory = memory
        if headers != {}:
            self.headers = headers
        if user_name != "":
            self.user_name = user_name
        if LLMs_name != "":
            self.LLMs_name = LLMs_name
        self.json_write_pass_empty(self.chat_data, "history", history)
        self.json_write_pass_empty(self.chat_data, "max_length", max_length)
        self.json_write_pass_empty(self.chat_data, "temperature", temperature)
        self.json_write_pass_empty(self.chat_data, "top_p", top_p)

    def clear(self, fromHead:bool=False) -> bool:    
        """Clears the chat history by removing old messages, leaving only the most recent ones.

        Args:
            fromHead (bool, optional): If True, clears messages from the beginning of the chat history. 
                If False, clears messages from the end of the chat history. Defaults to False.

        Returns:
            bool: True if chat history was cleared, False otherwise.
        """
        if self.memory == -1:
            return False
        dialogue_len = len(self.chat_data["history"])
        if dialogue_len <= self.memory:
            return False
            
        if fromHead:
            self.chat_data["history"] = self.chat_data["history"][:self.memory]
            self.chat_time = self.chat_time[:self.memory]
        else:
            self.chat_data["history"] = self.chat_data["history"][-self.memory:]
            self.chat_time = self.chat_time[-self.memory:]
        return True

    def log_chat_time(self, time_user, time_LLMs) -> None:
        """Logs the time at which a message was sent by the user and received from the chatbot.

        Args:
            time_user (str): The time at which the user sent the message.
            time_LLMs (str): The time at which the chatbot received the message.
        """
        self.chat_time.append([time_user, time_LLMs])
        
    def chat(self, prompt:str, prefix:str="", needPrint:bool=True, fromHead=False) -> int:
        """Sends a message to the chatbot and logs the conversation history.

        Args:
            prompt (str): The message to be sent to the chatbot.
            prefix (str, optional): A prefix to be added to the message. Defaults to "".
            needPrint (bool, optional): If True, logs the conversation to the console. Defaults to True.
            fromHead (bool, optional): If True, clears messages from the beginning of the chat history. 
                If False, clears messages from the end of the chat history. Defaults to False.

        Returns:
            int: The HTTP status code of the response from the chatbot API.
        """
        if self.check_command(prompt):
            return 0
        self.clear(fromHead=fromHead)
        prompt = prefix + prompt
        self.chat_data["prompt"] = prompt
        if needPrint:
            time_user = self.log(f"{self.user_name}: {prompt}")

        response = self.post(self.url, self.chat_data, headers=self.headers)
        
        if response.status_code == 200:
            result = self.convert_str2json(response.text)
            reply = result["response"]
            self.chat_data["history"] = result["history"]

            if needPrint:
                time_LLMs = self.log(f"{self.LLMs_name}: {reply}")
            else:
                time_LLMs = self.get_time()
            self.log_chat_time(time_user, time_LLMs)
        return response.status_code

    def chating(self) -> None:
        """Initiates a chat session with the chatbot."""
        while True:
            prompt = self.input()
            status_code = self.chat(prompt)
            if status_code == 200:
                continue
            elif status_code == 0:
                self.exec_command(prompt)
            else:
                self.log(f"Error: {status_code}")

    def task(self, prompt:str, history:list=[], prefix:str="") -> int:
        """
        Configures the chatbot's chat history and sends a message to the LLMs chatbot.

        Args:
            prompt (str): The message to send to the LLMs chatbot.
            history (list, optional): The chat history to configure. Defaults to [].
            prefix (str, optional): A prefix to add to the prompt. Defaults to "".

        Returns:
            int: The HTTP status code of the response.
        """
        self.configure(history=history)
        return self.chat(prompt, prefix=prefix, fromHead=True)

    def working(self, history:list=[], prefix:str="") -> None:
        """
        Starts a loop to continuously send messages to the LLMs chatbot.

        Args:
            history (list, optional): The chat history to configure. Defaults to [].
            prefix (str, optional): A prefix to add to the prompt. Defaults to "".

        Returns:
            None
        """
        while True:
            prompt = self.input()
            status_code = self.task(prompt, history, prefix)
            if status_code == 200:
                continue
            elif status_code == 0:
                self.exec_command(prompt)
            else:
                self.log(f"Error: {status_code}")